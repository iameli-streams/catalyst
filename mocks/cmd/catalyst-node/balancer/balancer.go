// Code generated by MockGen. DO NOT EDIT.
// Source: ./cmd/catalyst-node/balancer/balancer.go

// Package mock_balancer is a generated GoMock package.
package mock_balancer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "github.com/hashicorp/serf/client"
)

// MockBalancerIface is a mock of BalancerIface interface.
type MockBalancerIface struct {
	ctrl     *gomock.Controller
	recorder *MockBalancerIfaceMockRecorder
}

// MockBalancerIfaceMockRecorder is the mock recorder for MockBalancerIface.
type MockBalancerIfaceMockRecorder struct {
	mock *MockBalancerIface
}

// NewMockBalancerIface creates a new mock instance.
func NewMockBalancerIface(ctrl *gomock.Controller) *MockBalancerIface {
	mock := &MockBalancerIface{ctrl: ctrl}
	mock.recorder = &MockBalancerIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalancerIface) EXPECT() *MockBalancerIfaceMockRecorder {
	return m.recorder
}

// GetBestNode mocks base method.
func (m *MockBalancerIface) GetBestNode(redirectPrefixes []string, playbackID, lat, lon, fallbackPrefix string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBestNode", redirectPrefixes, playbackID, lat, lon, fallbackPrefix)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBestNode indicates an expected call of GetBestNode.
func (mr *MockBalancerIfaceMockRecorder) GetBestNode(redirectPrefixes, playbackID, lat, lon, fallbackPrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBestNode", reflect.TypeOf((*MockBalancerIface)(nil).GetBestNode), redirectPrefixes, playbackID, lat, lon, fallbackPrefix)
}

// Kill mocks base method.
func (m *MockBalancerIface) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockBalancerIfaceMockRecorder) Kill() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockBalancerIface)(nil).Kill))
}

// QueryMistForClosestNodeSource mocks base method.
func (m *MockBalancerIface) QueryMistForClosestNodeSource(playbackID, lat, lon, prefix string, source bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMistForClosestNodeSource", playbackID, lat, lon, prefix, source)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMistForClosestNodeSource indicates an expected call of QueryMistForClosestNodeSource.
func (mr *MockBalancerIfaceMockRecorder) QueryMistForClosestNodeSource(playbackID, lat, lon, prefix, source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMistForClosestNodeSource", reflect.TypeOf((*MockBalancerIface)(nil).QueryMistForClosestNodeSource), playbackID, lat, lon, prefix, source)
}

// Start mocks base method.
func (m *MockBalancerIface) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockBalancerIfaceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockBalancerIface)(nil).Start))
}

// UpdateMembers mocks base method.
func (m *MockBalancerIface) UpdateMembers(members *[]client.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMembers", members)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMembers indicates an expected call of UpdateMembers.
func (mr *MockBalancerIfaceMockRecorder) UpdateMembers(members interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMembers", reflect.TypeOf((*MockBalancerIface)(nil).UpdateMembers), members)
}
