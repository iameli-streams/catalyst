// Code generated by MockGen. DO NOT EDIT.
// Source: ./cmd/catalyst-node/cluster/cluster.go

// Package mock_cluster is a generated GoMock package.
package mock_cluster

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "github.com/hashicorp/serf/client"
)

// MockClusterIface is a mock of ClusterIface interface.
type MockClusterIface struct {
	ctrl     *gomock.Controller
	recorder *MockClusterIfaceMockRecorder
}

// MockClusterIfaceMockRecorder is the mock recorder for MockClusterIface.
type MockClusterIfaceMockRecorder struct {
	mock *MockClusterIface
}

// NewMockClusterIface creates a new mock instance.
func NewMockClusterIface(ctrl *gomock.Controller) *MockClusterIface {
	mock := &MockClusterIface{ctrl: ctrl}
	mock.recorder = &MockClusterIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterIface) EXPECT() *MockClusterIfaceMockRecorder {
	return m.recorder
}

// Member mocks base method.
func (m *MockClusterIface) Member(filter map[string]string, status, name string) (*client.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Member", filter, status, name)
	ret0, _ := ret[0].(*client.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Member indicates an expected call of Member.
func (mr *MockClusterIfaceMockRecorder) Member(filter, status, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Member", reflect.TypeOf((*MockClusterIface)(nil).Member), filter, status, name)
}

// MembersFiltered mocks base method.
func (m *MockClusterIface) MembersFiltered(filter map[string]string, status, name string) ([]client.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MembersFiltered", filter, status, name)
	ret0, _ := ret[0].([]client.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MembersFiltered indicates an expected call of MembersFiltered.
func (mr *MockClusterIfaceMockRecorder) MembersFiltered(filter, status, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MembersFiltered", reflect.TypeOf((*MockClusterIface)(nil).MembersFiltered), filter, status, name)
}

// Start mocks base method.
func (m *MockClusterIface) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockClusterIfaceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockClusterIface)(nil).Start))
}
